#!/usr/bin/env groovy

def argocd_image = '428466588005.dkr.ecr.eu-west-1.amazonaws.com/devops:argocdcli-1.2.3'

properties([
    buildDiscarder(
        logRotator(
            daysToKeepStr: '5',
            numToKeepStr: '5'
        )
    ),
    parameters([
        string(name: 'K8S_NAMESPACE', trim: true, defaultValue: 'default'),
        string(name: 'ARGOCD_APP', trim: true, defaultValue: 'ldm'),
        string(name: 'DOCKER_IMAGE_TAG', trim: true, defaultValue: 'latest'),
    ])
])

if (!params.K8S_NAMESPACE) {
    error 'K8S_NAMESPACE parameter not defined'
}

if (!params.ARGOCD_APP) {
    error 'ARGOCD_APP parameter not defined'
}

if (!params.DOCKER_IMAGE_TAG) {
    error 'DOCKER_IMAGE_TAG parameter not defined'
}

currentBuild.displayName = "Deployment to '${params.K8S_NAMESPACE}' namespace"
currentBuild.description = "Deployment to '${params.K8S_NAMESPACE}' namespace"

node("jenkins-k8s") {
    try {

        stage ('Print environment') {
            sh 'printenv | sort -n'
        }

        stage ('ECR login') {
            sh "aws ecr get-login --no-include-email --region eu-west-1 | /bin/bash"
        }

        stage ('Deploy with ArgoCD') {
            def APP_NAME = sh(returnStdout: true, label: "Check if app exists", script: "docker run $argocd_image argocd app list | egrep ^${params.K8S_NAMESPACE}-${params.ARGOCD_APP} | awk '{print \$1}'").trim()
            if (APP_NAME == "${params.K8S_NAMESPACE}-${params.ARGOCD_APP}" ) {
              sh label: "Override the image tag", script: "docker run $argocd_image argocd app set $APP_NAME -p image.tag=${params.DOCKER_IMAGE_TAG}"
              sh label: "Force ArgoCD to sync the application", script: "docker run $argocd_image argocd app sync $APP_NAME --strategy apply"
              sh label: "Wait for the sync process to complete", script: "docker run $argocd_image argocd app wait $APP_NAME"
            }
        }
    } catch (ex) {
        stage('Notify') {
            slackSend baseUrl: 'https://dekopay.slack.com/services/hooks/jenkins-ci/', color: 'danger', message: "Deployment of decisioning to ${params.TERRAFORM_WORKSPACE} failed: ${ex}", tokenCredentialId: 'slack-deployment'
            error(ex)
        }
    } finally {
        stage('Clean Up') {
            cleanWs()
        }
    }
}
