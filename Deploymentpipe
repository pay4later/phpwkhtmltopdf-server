#!/usr/bin/env groovy
def HASH
def DOCKER_TAG

properties([
    buildDiscarder(
        logRotator(
            daysToKeepStr: '5',
            numToKeepStr: '5'
        )
    ),
    parameters([
        string(name: 'TERRAFORM_BACKEND', trim: true),
        string(name: 'TERRAFORM_WORKSPACE', trim: true),
        string(name: 'DOCKER_REGISTRY', trim: true),
        string(name: 'IMAGE_NAME', trim: true),
        string(name: 'REGION', trim: true)
    ])
])

if (!params.TERRAFORM_BACKEND) {
    error 'TERRAFORM_BACKEND parameter not defined'
}

if (!params.TERRAFORM_WORKSPACE) {
    error 'TERRAFORM_WORKSPACE parameter not defined'
}

if (!params.DOCKER_REGISTRY) {
    error 'DOCKER_REGISTRY parameter not defined'
}

if (!params.IMAGE_NAME) {
    error 'IMAGE_NAME parameter not defined'
}

if (!params.REGION) {
    error 'REGION parameter not defined'
}

node {
    try {
        stage ('Checkout') {
            sh 'printenv'
            checkout scm
            sh 'git clean -fdx'
        }

        HASH = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
        DOCKER_TAG = "${params.TERRAFORM_WORKSPACE}-${HASH}"
        def DOCKER_IMAGE = "${params.DOCKER_REGISTRY}/${params.IMAGE_NAME}:${DOCKER_TAG}"

        stage ('Deps for deploy') {
            sh 'cp .env.example .env'
            sh 'make docker-login'
            sh 'echo "LOCAL_USER_ID=$(id -u)" >> .env'
            sh 'docker-compose down --remove-orphans'
            sh 'docker-compose run dev make composer.phar'
            sh 'docker-compose run dev php composer.phar install --no-dev --no-progress --no-suggest --optimize-autoloader'
        }

        stage ('Build image') {
            sh "docker build -t ${DOCKER_IMAGE} ."
        }

        stage ('Push image') {
            sh "aws ecr get-login-password --region ${params.REGION} | docker login --username AWS --password-stdin ${params.DOCKER_REGISTRY}"
            sh "docker push ${DOCKER_IMAGE}"
        }

        stage ('Terraform Plan') {
            sh "./bin/terraform-plan ${params.TERRAFORM_BACKEND} ${params.TERRAFORM_WORKSPACE} ${DOCKER_IMAGE}"
        }

        stage ('Deploy') {
            sh "./bin/deploy ${params.TERRAFORM_BACKEND} ${params.TERRAFORM_WORKSPACE}"
        }
    } finally {
        stage('Clean Up') {
            sh 'docker-compose down --remove-orphans'
            cleanWs()
        }
    }
}

if (env.BRANCH_NAME ==~ /^(develop)$/) {
    stage ('Deploy to Kubernetes') {
        build job: "Kubepipe/phpwkhtmltopdf-server/$BRANCH_NAME",
              parameters: [
                      string(name: 'ARGOCD_APP', value: 'pdfserver'),
                      string(name: 'K8S_NAMESPACE', value: 'develop'),
                      string(name: 'DOCKER_IMAGE_TAG', value: "${DOCKER_TAG}")
              ],
              wait: true
    }
}

if (env.BRANCH_NAME ==~ /^(staging)$/) {
    stage ('Deploy to Kubernetes') {
        build job: "Kubepipe/phpwkhtmltopdf-server/$BRANCH_NAME",
              parameters: [
                      string(name: 'ARGOCD_APP', value: 'pdfserver'),
                      string(name: 'K8S_NAMESPACE', value: 'staging'),
                      string(name: 'DOCKER_IMAGE_TAG', value: "${DOCKER_TAG}")
              ],
              wait: true
    }
}

if (env.BRANCH_NAME ==~ /^(master)$/) {
    stage ('Deploy to Kubernetes') {
        build job: "Kubepipe/phpwkhtmltopdf-server/$BRANCH_NAME",
              parameters: [
                      string(name: 'ARGOCD_APP', value: 'pdfserver'),
                      string(name: 'K8S_NAMESPACE', value: 'production'),
                      string(name: 'DOCKER_IMAGE_TAG', value: "${DOCKER_TAG}")
              ],
              wait: true
    }
}
